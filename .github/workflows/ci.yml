name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_TRAINING: engagement-training
  ECR_REPOSITORY_INFERENCE: engagement-inference

jobs:
  # ============================================
  # Stage 1: Lint & Format
  # ============================================
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          pip install black flake8 isort mypy pylint

      - name: Run Black (formatter)
        run: black --check .

      - name: Run isort (import sorter)
        run: isort --check-only .

      - name: Run Flake8 (linter)
        run: flake8 lambda/ fargate/ --max-line-length=100

      - name: Run mypy (type checker)
        run: mypy lambda/ fargate/ --ignore-missing-imports

      - name: Run pylint
        run: pylint lambda/ fargate/ --exit-zero --score=yes

  # ============================================
  # Stage 2: Unit Tests
  # ============================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            --cov=lambda \
            --cov=fargate \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=test-results.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results.xml

  # ============================================
  # Stage 3: Security Scans
  # ============================================
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy (vulnerability scanner)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Safety (Python dependency scanner)
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format json --output pip-audit-report.json || true

      - name: Run Bandit (Python security linter)
        run: |
          pip install bandit
          bandit -r lambda/ fargate/ -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json

  # ============================================
  # Stage 4: Terraform Validation
  # ============================================
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform -chdir=terraform init -backend=false

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      - name: Terraform Format Check
        run: terraform -chdir=terraform fmt -check -recursive

      - name: Run tfsec (Terraform security scanner)
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform/
          soft_fail: false

      - name: Run Checkov (policy compliance)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Install Infracost
        run: |
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

      - name: Run Infracost
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          infracost breakdown \
            --path terraform/ \
            --format json \
            --out-file infracost-report.json

      - name: Check cost threshold
        run: |
          MONTHLY_COST=$(jq '.totalMonthlyCost | tonumber' infracost-report.json)
          if (( $(echo "$MONTHLY_COST > 500" | bc -l) )); then
            echo "⚠️ Monthly cost ($MONTHLY_COST) exceeds $500 threshold"
            exit 1
          fi

      - name: Upload Infracost report
        uses: actions/upload-artifact@v3
        with:
          name: infracost-report
          path: infracost-report.json

  # ============================================
  # Stage 5: Integration Tests (LocalStack)
  # ============================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,lambda,ecs,athena,stepfunctions,secretsmanager,kms,iam
          DEBUG: 1
        options: >-
          --health-cmd "awslocal s3 ls"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install awscli-local

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until awslocal s3 ls; do sleep 2; done'

      - name: Run integration tests
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          pytest tests/integration/ -v --tb=short

  # ============================================
  # Stage 6: Build Docker Images
  # ============================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, security, terraform]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build training image
        uses: docker/build-push-action@v5
        with:
          context: fargate/training
          file: fargate/training/Dockerfile
          push: false
          tags: ${{ env.ECR_REPOSITORY_TRAINING }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build inference image
        uses: docker/build-push-action@v5
        with:
          context: fargate/inference
          file: fargate/inference/Dockerfile
          push: false
          tags: ${{ env.ECR_REPOSITORY_INFERENCE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan training image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REPOSITORY_TRAINING }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-training-image.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Scan inference image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REPOSITORY_INFERENCE }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-inference-image.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-training-image.sarif
            trivy-inference-image.sarif

  # ============================================
  # Stage 7: ML Model Tests
  # ============================================
  ml-tests:
    name: ML Model Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r fargate/training/requirements.txt
          pip install -r requirements-dev.txt

      - name: Generate test data
        run: |
          python tests/data/generate_test_data.py

      - name: Run model performance tests
        run: |
          pytest tests/ml/test_model_performance.py -v

      - name: Run fairness tests
        run: |
          pytest tests/fairness/test_bias_detection.py -v

      - name: Run explainability tests
        run: |
          pytest tests/ml/test_explainability.py -v

  # ============================================
  # Stage 8: End-to-End Tests (on PR only)
  # ============================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'pull_request'
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,lambda,ecs,athena,stepfunctions,ecr
          DEBUG: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install awscli-local

      - name: Deploy infrastructure to LocalStack
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
        run: |
          make localstack-deploy

      - name: Run E2E tests
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
        run: |
          pytest tests/e2e/ -v --tb=short
        timeout-minutes: 15

  # ============================================
  # Stage 9: Deploy to Dev (main branch only)
  # ============================================
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [build, integration-tests, ml-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: development
      url: https://dev-engagement-api.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push training image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:$IMAGE_TAG fargate/training/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:latest

      - name: Build, tag, and push inference image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_INFERENCE:$IMAGE_TAG fargate/inference/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_INFERENCE:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_INFERENCE:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_INFERENCE:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_INFERENCE:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan
        run: |
          terraform -chdir=terraform plan \
            -var="environment=dev" \
            -var="training_image_tag=${{ github.sha }}" \
            -var="inference_image_tag=${{ github.sha }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve tfplan

      - name: Run smoke tests
        run: |
          # Wait for API to be healthy
          sleep 30
          curl -f https://dev-engagement-api.example.com/health || exit 1

  # ============================================
  # Stage 10: Notify
  # ============================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: always()
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "CI/CD Pipeline ${{ job.status }} - Commit: ${{ github.sha }} by ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

